{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar d3 = require('d3');\n\nmodule.exports = React.createClass({\n  displayName: 'AxisTick',\n  propTypes: {\n    scale: React.PropTypes.func.isRequired,\n    orient: React.PropTypes.oneOf(['top', 'bottom', 'left', 'right']).isRequired,\n    orient2nd: React.PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n    height: React.PropTypes.number.isRequired,\n    width: React.PropTypes.number.isRequired,\n    tickArguments: React.PropTypes.array,\n    tickValues: React.PropTypes.array,\n    innerTickSize: React.PropTypes.number,\n    outerTickSize: React.PropTypes.number,\n    tickPadding: React.PropTypes.number,\n    tickFormat: React.PropTypes.func,\n    tickStroke: React.PropTypes.string,\n    gridHorizontal: React.PropTypes.bool,\n    gridVertical: React.PropTypes.bool,\n    gridHorizontalStroke: React.PropTypes.string,\n    gridVerticalStroke: React.PropTypes.string,\n    gridHorizontalStrokeWidth: React.PropTypes.number,\n    gridVerticalStrokeWidth: React.PropTypes.number,\n    gridHorizontalStrokeDash: React.PropTypes.string,\n    gridVerticalStrokeDash: React.PropTypes.string\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickStroke: '#000',\n      tickPadding: 3,\n      tickArguments: [10],\n      tickValues: null,\n      gridHorizontal: false,\n      gridVertical: false,\n      gridHorizontalStroke: '#D8D7D7',\n      gridVerticalStroke: '#D8D7D7',\n      gridHorizontalStrokeWidth: 1,\n      gridVerticalStrokeWidth: 1,\n      gridHorizontalStrokeDash: '5, 5',\n      gridVerticalStrokeDash: '5, 5'\n    };\n  },\n  render: function render() {\n    var props = this.props;\n    var tr, ticks, scale, adjustedScale, textAnchor, tickFormat, y0, y1, y2, dy, x0, x1, x2, dx;\n    var gridStrokeWidth, gridStroke, gridStrokeDashArray, x2grid, y2grid;\n    var gridOn = false;\n    var sign = props.orient === 'top' || props.orient === 'right' ? -1 : 1;\n    var tickSpacing = Math.max(props.innerTickSize, 0) + props.tickPadding;\n    scale = props.scale;\n\n    if (props.tickValues) {\n      ticks = props.tickValues;\n    } else if (scale.ticks) {\n      ticks = scale.ticks.apply(scale, props.tickArguments);\n    } else {\n      ticks = scale.domain();\n    }\n\n    if (props.tickFormatting) {\n      tickFormat = props.tickFormatting;\n    } else if (scale.tickFormat) {\n      tickFormat = scale.tickFormat.apply(scale, props.tickArguments);\n    } else {\n      tickFormat = function tickFormat(d) {\n        return d;\n      };\n    }\n\n    adjustedScale = scale.rangeBand ? function (d) {\n      return scale(d) + scale.rangeBand() / 2;\n    } : scale; // Still working on this\n    // Ticks and lines are not fully aligned\n    // in some orientations\n\n    switch (props.orient) {\n      case 'top':\n        tr = function tr(tick) {\n          return \"translate(\" + adjustedScale(tick) + \",0)\";\n        };\n\n        textAnchor = \"middle\";\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? \"0em\" : \".71em\";\n        x2grid = 0;\n        y2grid = -props.height;\n        break;\n\n      case 'bottom':\n        tr = function tr(tick) {\n          return \"translate(\" + adjustedScale(tick) + \",0)\";\n        };\n\n        textAnchor = \"middle\";\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy = sign < 0 ? \"0em\" : \".71em\";\n        x2grid = 0;\n        y2grid = -props.height;\n        break;\n\n      case 'left':\n        tr = function tr(tick) {\n          return \"translate(0,\" + adjustedScale(tick) + \")\";\n        };\n\n        textAnchor = \"end\";\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = \".32em\";\n        x2grid = props.width;\n        y2grid = 0;\n        break;\n\n      case 'right':\n        tr = function tr(tick) {\n          return \"translate(0,\" + adjustedScale(tick) + \")\";\n        };\n\n        textAnchor = \"start\";\n        x2 = props.innerTickSize * -sign;\n        x1 = tickSpacing * -sign;\n        dy = \".32em\";\n        x2grid = -props.width;\n        y2grid = 0;\n        break;\n    }\n\n    if (props.gridHorizontal) {\n      gridOn = true;\n      gridStrokeWidth = props.gridHorizontalStrokeWidth;\n      gridStroke = props.gridHorizontalStroke;\n      gridStrokeDashArray = props.gridHorizontalStrokeDash;\n    } else if (props.gridVertical) {\n      gridOn = true;\n      gridStrokeWidth = props.gridVerticalStrokeWidth;\n      gridStroke = props.gridVerticalStroke;\n      gridStrokeDashArray = props.gridVerticalStrokeDash;\n    } // return grid line if grid is enabled and grid line is not on at same position as other axis.\n\n\n    var gridLine = function gridLine(pos) {\n      if (gridOn && !(props.orient2nd == 'left' && pos == 0) && !(props.orient2nd == 'right' && pos == props.width) && !((props.orient == 'left' || props.orient == 'right') && pos == props.height)) {\n        return React.createElement(\"line\", {\n          style: {\n            strokeWidth: gridStrokeWidth,\n            shapeRendering: 'crispEdges',\n            stroke: gridStroke,\n            strokeDasharray: gridStrokeDashArray\n          },\n          x2: x2grid,\n          y2: y2grid\n        });\n      }\n    };\n\n    return React.createElement(\"g\", null, ticks.map(function (tick, idx) {\n      return React.createElement(\"g\", {\n        key: idx,\n        className: \"tick\",\n        transform: tr(tick)\n      }, gridLine(adjustedScale(tick)), React.createElement(\"line\", {\n        style: {\n          shapeRendering: 'crispEdges',\n          opacity: '1',\n          stroke: props.tickStroke\n        },\n        x2: x2,\n        y2: y2\n      }), React.createElement(\"text\", {\n        strokeWidth: \"0.01\",\n        dy: dy,\n        x: x1,\n        y: y1,\n        style: {\n          stroke: props.tickTextStroke,\n          fill: props.tickTextStroke\n        },\n        textAnchor: textAnchor\n      }, tickFormat(tick)));\n    }));\n  }\n});","map":null,"metadata":{},"sourceType":"script"}