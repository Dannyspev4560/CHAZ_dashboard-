{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar d3 = require('d3');\n\nvar utils = require('../utils');\n\nvar DataSeries = require('./DataSeries');\n\nvar $__0 = require('../common'),\n    Chart = $__0.Chart,\n    XAxis = $__0.XAxis,\n    YAxis = $__0.YAxis;\n\nmodule.exports = React.createClass({\n  displayName: 'CandleStickChart',\n  propTypes: {\n    data: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),\n    fillUp: React.PropTypes.func,\n    fillUpAccessor: React.PropTypes.func,\n    fillDown: React.PropTypes.func,\n    fillDownAccessor: React.PropTypes.func,\n    height: React.PropTypes.number,\n    hoverAnimation: React.PropTypes.bool,\n    title: React.PropTypes.string,\n    xAccessor: React.PropTypes.func,\n    xAxisFormatter: React.PropTypes.func,\n    xAxisTickInterval: React.PropTypes.object,\n    xAxisTickValues: React.PropTypes.array,\n    yAccessor: React.PropTypes.func,\n    yAxisFormatter: React.PropTypes.func,\n    yAxisTickCount: React.PropTypes.number,\n    yAxisTickValues: React.PropTypes.array,\n    width: React.PropTypes.number\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      className: 'rd3-candlestick',\n      xAxisClassName: 'rd3-candlestick-xaxis',\n      yAxisClassName: 'rd3-candlestick-yaxis',\n      data: [],\n      fillUp: function fillUp(value) {\n        return '#ffffff';\n      },\n      fillUpAccessor: function fillUpAccessor(d, idx) {\n        return idx;\n      },\n      fillDown: d3.scale.category20c(),\n      fillDownAccessor: function fillDownAccessor(d, idx) {\n        return idx;\n      },\n      height: 200,\n      hoverAnimation: true,\n      margins: {\n        top: 10,\n        right: 20,\n        bottom: 30,\n        left: 45\n      },\n      legendOffset: 120,\n      title: '',\n      xAccessor: function xAccessor(d) {\n        return d.x;\n      },\n      yAccessor: function yAccessor(d) {\n        return {\n          open: d.open,\n          high: d.high,\n          low: d.low,\n          close: d.close\n        };\n      },\n      width: 400\n    };\n  },\n  render: function render() {\n    var props = this.props; // Calculate inner chart dimensions\n\n    var innerWidth, innerHeight;\n    innerWidth = props.width - props.margins.left - props.margins.right;\n    innerHeight = props.height - props.margins.top - props.margins.bottom;\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n\n    var flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n    var allValues = flattenedData.allValues,\n        xValues = flattenedData.xValues,\n        yValues = flattenedData.yValues;\n    var scales = utils.calculateScales(innerWidth, innerHeight, xValues, yValues);\n    var trans = \"translate(\" + (props.yAxisOffset < 0 ? props.margins.left + Math.abs(props.yAxisOffset) : props.margins.left) + \",\" + props.margins.top + \")\";\n    var dataSeries = props.data.map(function (series, idx) {\n      return React.createElement(DataSeries, {\n        key: idx,\n        seriesName: series.name,\n        index: idx,\n        xScale: scales.xScale,\n        yScale: scales.yScale,\n        data: series.values,\n        fillUp: props.fillUp(props.fillUpAccessor(series, idx)),\n        fillDown: props.fillDown(props.fillDownAccessor(series, idx)),\n        xAccessor: props.xAccessor,\n        yAccessor: props.yAccessor,\n        hoverAnimation: props.hoverAnimation\n      });\n    });\n    return React.createElement(Chart, {\n      viewBox: props.viewBox,\n      width: props.width,\n      height: props.height,\n      margins: props.margins,\n      title: props.title\n    }, React.createElement(\"g\", {\n      transform: trans,\n      className: props.className\n    }, React.createElement(XAxis, {\n      xAxisClassName: props.xAxisClassName,\n      xScale: scales.xScale,\n      xAxisTickValues: props.xAxisTickValues,\n      xAxisTickInterval: props.xAxisTickInterval,\n      xAxisOffset: props.xAxisOffset,\n      tickFormatting: props.xAxisFormatter,\n      xAxisLabel: props.xAxisLabel,\n      xAxisLabelOffset: props.xAxisLabelOffset,\n      xOrient: props.xOrient,\n      yOrient: props.yOrient,\n      margins: props.margins,\n      width: innerWidth,\n      height: innerHeight,\n      gridVertical: props.gridVertical,\n      gridVerticalStroke: props.gridVerticalStroke,\n      gridVerticalStrokeWidth: props.gridVerticalStrokeWidth,\n      gridVerticalStrokeDash: props.gridVerticalStrokeDash\n    }), React.createElement(YAxis, {\n      yAxisClassName: props.yAxisClassName,\n      yScale: scales.yScale,\n      yAxisTickValues: props.yAxisTickValues,\n      yAxisOffset: props.yAxisOffset,\n      yAxisTickCount: props.yAxisTickCount,\n      tickFormatting: props.yAxisFormatter,\n      yAxisLabel: props.yAxisLabel,\n      yAxisLabelOffset: props.yAxisLabelOffset,\n      xOrient: props.xOrient,\n      yOrient: props.yOrient,\n      margins: props.margins,\n      width: innerWidth,\n      height: props.height,\n      gridHorizontal: props.gridHorizontal,\n      gridHorizontalStroke: props.gridHorizontalStroke,\n      gridHorizontalStrokeWidth: props.gridHorizontalStrokeWidth,\n      gridHorizontalStrokeDash: props.gridHorizontalStrokeDash\n    }), dataSeries));\n  }\n});","map":null,"metadata":{},"sourceType":"script"}