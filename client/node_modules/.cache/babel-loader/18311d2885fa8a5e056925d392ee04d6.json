{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\src\\\\DashboardBody.js\",\n    _this2 = this;\n\nimport React from 'react';\nimport './DashboardBody.css';\nimport Progress from './DashboradBody/Progress';\nimport CycleGraph from './DashboradBody/CycleGraph';\nimport CycleTable from './DashboradBody/CycleTable';\nimport OvensView from './DashboradBody/OvensView.js';\nimport axios from 'axios';\n\nvar DashboardBody =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DashboardBody, _React$Component);\n\n  function DashboardBody(props) {\n    var _this;\n\n    _classCallCheck(this, DashboardBody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DashboardBody).call(this, props));\n\n    _this.getDataFromDb = function () {\n      axios.get('http://localhost:3002/api/cycles', {}).then(function (res) {\n        _this.setState({\n          table_data: res.data\n        });\n\n        console.log(_this.state.table_data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n      axios.get('http://localhost:3002/api/executions', {}).then(function (res) {\n        _this.setState({\n          executions_data: res.data\n        });\n\n        console.log(_this.state.executions_data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n      axios.get('http://localhost:3002/api/chamber', {}).then(function (res) {\n        _this.setState({\n          chamber_data: res.data\n        });\n\n        console.log(_this.state.chamber_data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.updateDB = function (idToUpdate, updateToApply) {\n      axios.post(\"http://localhost:3002/api/updateData\", {\n        id: idToUpdate,\n        update: {\n          message: updateToApply\n        }\n      }).then(function (response) {\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n        window.alert(error);\n      });\n    };\n\n    _this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      objectToUpdate: null,\n      loading: true,\n      table_data: [],\n      executions_data: [],\n      chamber_data: []\n    };\n    _this.getDataFromDb = _this.getDataFromDb.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DashboardBody, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 12000000); //timeout currently one minute\n\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"script\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"CHAZ Dashboard\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Side Nav\")), React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Progress, {\n        data: this.state.executions_data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(CycleTable, {\n        data: this.state.table_data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), postView)), React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(CycleGraph, {\n        data: this.state.table_data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(OvensView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return DashboardBody;\n}(React.Component);\n\nvar postView = React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 122\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  style: {\n    width: \"100px\"\n  },\n  onChange: function onChange(e) {\n    return _this2.setState({\n      idToUpdate: e.target.value\n    });\n  },\n  placeholder: \"id\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 123\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  style: {\n    width: \"100px\"\n  },\n  onChange: function onChange(e) {\n    return _this2.setState({\n      updateToApply: e.target.value\n    });\n  },\n  placeholder: \"value\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 129\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  onClick: function onClick() {\n    return _this2.updateDB(_this2.state.idToUpdate, _this2.state.updateToApply);\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 135\n  },\n  __self: this\n}, \"Send Data To Backend\"));\nexport default DashboardBody;","map":{"version":3,"sources":["C:\\Users\\7316093\\CHAZ_Dash\\fullstack_app\\client\\src\\DashboardBody.js"],"names":["React","Progress","CycleGraph","CycleTable","OvensView","axios","DashboardBody","props","getDataFromDb","get","then","res","setState","table_data","data","console","log","state","catch","error","executions_data","chamber_data","updateDB","idToUpdate","updateToApply","post","id","update","message","response","window","alert","intervalIsSet","objectToUpdate","loading","bind","interval","setInterval","clearInterval","postView","Component","width","e","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './DashboardBody.css';\r\nimport Progress from './DashboradBody/Progress';\r\nimport CycleGraph from './DashboradBody/CycleGraph';\r\nimport CycleTable from './DashboradBody/CycleTable';\r\nimport OvensView from './DashboradBody/OvensView.js';\r\nimport axios from 'axios';\r\n\r\n\r\nclass DashboardBody extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            id: 0,\r\n            message: null,\r\n            intervalIsSet: false,\r\n            objectToUpdate: null,\r\n            loading: true,\r\n            table_data: [],\r\n            executions_data:[],\r\n            chamber_data:[],\r\n        };\r\n\r\n        this.getDataFromDb = this.getDataFromDb.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getDataFromDb();\r\n        if (!this.state.intervalIsSet) {\r\n            let interval = setInterval(this.getDataFromDb, 12000000);//timeout currently one minute\r\n            this.setState({ intervalIsSet: interval });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.intervalIsSet) {\r\n            clearInterval(this.state.intervalIsSet);\r\n            this.setState({ intervalIsSet: null });\r\n        }\r\n    }\r\n\r\n\r\n    getDataFromDb = ()=> {\r\n\r\n        axios.get('http://localhost:3002/api/cycles', {})\r\n            .then((res) => {\r\n                this.setState({table_data: res.data});\r\n                console.log(this.state.table_data);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n        axios.get('http://localhost:3002/api/executions', {})\r\n            .then((res) => {\r\n                this.setState({executions_data: res.data});\r\n                console.log(this.state.executions_data);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n        axios.get('http://localhost:3002/api/chamber',{})\r\n            .then((res)=>{\r\n                this.setState({chamber_data:res.data})\r\n                console.log(this.state.chamber_data);\r\n        })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    updateDB = (idToUpdate, updateToApply) => {\r\n        axios.post(\"http://localhost:3002/api/updateData\", {\r\n            id: idToUpdate,\r\n            update: { message: updateToApply }\r\n        }).then(function (response) {\r\n\r\n            console.log(response);\r\n        })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                window.alert(error);\r\n            });\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div className=\"shadow\">\r\n                        <h1 className=\"script\">CHAZ Dashboard</h1>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <h2>Side Nav</h2>\r\n                </div>\r\n                <div className=\"\">\r\n                    <div className=\"\">\r\n                        <div className=\"\">\r\n                            <Progress data={this.state.executions_data}/>\r\n                        </div>\r\n                        <div className=\"\">\r\n                            <CycleTable data={this.state.table_data}/>\r\n                            {postView}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"\">\r\n                        <div className=\"\">\r\n                            <CycleGraph data={this.state.table_data}/>\r\n                            <OvensView/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet postView= <div>\r\n    <input\r\n        type=\"text\"\r\n        style={{ width: \"100px\" }}\r\n        onChange={e => this.setState({ idToUpdate: e.target.value })}\r\n        placeholder=\"id\"\r\n    />\r\n    <input\r\n        type=\"text\"\r\n        style={{ width: \"100px\" }}\r\n        onChange={e => this.setState({ updateToApply: e.target.value })}\r\n        placeholder=\"value\"\r\n    />\r\n    <button\r\n        onClick={() =>\r\n            this.updateDB(this.state.idToUpdate, this.state.updateToApply)\r\n        }\r\n    >\r\n        Send Data To Backend\r\n    </button>\r\n</div>\r\n\r\nexport default DashboardBody;"]},"metadata":{},"sourceType":"module"}