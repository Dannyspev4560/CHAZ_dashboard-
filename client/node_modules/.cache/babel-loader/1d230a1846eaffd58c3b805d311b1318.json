{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar d3 = require('d3');\n\nvar DataSeries = require('./DataSeries');\n\nvar $__0 = require('../common'),\n    Chart = $__0.Chart,\n    XAxis = $__0.XAxis,\n    YAxis = $__0.YAxis;\n\nvar $__1 = require('../mixins'),\n    CartesianChartPropsMixin = $__1.CartesianChartPropsMixin,\n    ViewBoxMixin = $__1.ViewBoxMixin;\n\nmodule.exports = React.createClass({\n  mixins: [CartesianChartPropsMixin, ViewBoxMixin],\n  displayName: 'AreaChart',\n  propTypes: {\n    margins: React.PropTypes.object,\n    interpolate: React.PropTypes.bool,\n    interpolationType: React.PropTypes.string,\n    hoverAnimation: React.PropTypes.bool\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      margins: {\n        top: 10,\n        right: 20,\n        bottom: 40,\n        left: 45\n      },\n      yAxisTickCount: 4,\n      interpolate: false,\n      interpolationType: null,\n      className: 'rd3-areachart',\n      hoverAnimation: true\n    };\n  },\n  render: function render() {\n    var props = this.props;\n    var data = props.data;\n    var interpolationType = props.interpolationType || (props.interpolate ? 'cardinal' : 'linear'); // Calculate inner chart dimensions\n\n    var innerWidth, innerHeight;\n    innerWidth = this.getOuterDimensions().width - props.margins.left - props.margins.right;\n    innerHeight = this.getOuterDimensions().height - props.margins.top - props.margins.bottom;\n\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n\n    var yScale = d3.scale.linear().range([innerHeight, 0]);\n    var xValues = [];\n    var yValues = [];\n    var seriesNames = [];\n    var yMaxValues = [];\n    data.forEach(function (series) {\n      var upper = 0;\n      seriesNames.push(series.name);\n      series.values.forEach(function (val, idx) {\n        upper = Math.max(upper, props.yAccessor(val));\n        xValues.push(props.xAccessor(val));\n        yValues.push(props.yAccessor(val));\n      });\n      yMaxValues.push(upper);\n    });\n    var xScale;\n\n    if (xValues.length > 0 && Object.prototype.toString.call(xValues[0]) === '[object Date]' && props.xAxisTickInterval) {\n      xScale = d3.time.scale().range([0, innerWidth]);\n    } else {\n      xScale = d3.scale.linear().range([0, innerWidth]);\n    }\n\n    xScale.domain(d3.extent(xValues));\n    yScale.domain([0, d3.sum(yMaxValues)]);\n    props.colors.domain(seriesNames);\n    var stack = d3.layout.stack().x(props.xAccessor).y(props.yAccessor).values(function (d) {\n      return d.values;\n    });\n    var layers = stack(data);\n    var trans = \"translate(\" + props.margins.left + \",\" + props.margins.top + \")\";\n    var dataSeries = layers.map(function (d, idx) {\n      return React.createElement(DataSeries, {\n        key: idx,\n        seriesName: d.name,\n        fill: props.colors(props.colorAccessor(d, idx)),\n        index: idx,\n        xScale: xScale,\n        yScale: yScale,\n        data: d.values,\n        xAccessor: props.xAccessor,\n        yAccessor: props.yAccessor,\n        interpolationType: interpolationType,\n        hoverAnimation: props.hoverAnimation\n      });\n    });\n    return React.createElement(Chart, {\n      viewBox: this.getViewBox(),\n      legend: props.legend,\n      data: data,\n      margins: props.margins,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      width: props.width,\n      height: props.height,\n      title: props.title\n    }, React.createElement(\"g\", {\n      transform: trans,\n      className: props.className\n    }, React.createElement(XAxis, {\n      xAxisClassName: \"rd3-areachart-xaxis\",\n      xScale: xScale,\n      xAxisTickValues: props.xAxisTickValues,\n      xAxisTickInterval: props.xAxisTickInterval,\n      xAxisTickCount: props.xAxisTickCount,\n      xAxisLabel: props.xAxisLabel,\n      xAxisLabelOffset: props.xAxisLabelOffset,\n      tickFormatting: props.xAxisFormatter,\n      xOrient: props.xOrient,\n      yOrient: props.yOrient,\n      margins: props.margins,\n      width: innerWidth,\n      height: innerHeight,\n      gridVertical: props.gridVertical,\n      gridVerticalStroke: props.gridVerticalStroke,\n      gridVerticalStrokeWidth: props.gridVerticalStrokeWidth,\n      gridVerticalStrokeDash: props.gridVerticalStrokeDash\n    }), React.createElement(YAxis, {\n      yAxisClassName: \"rd3-areachart-yaxis\",\n      yScale: yScale,\n      yAxisTickValues: props.yAxisTickValues,\n      yAxisTickInterval: props.yAxisTickInterval,\n      yAxisTickCount: props.yAxisTickCount,\n      yAxisLabel: props.yAxisLabel,\n      yAxisLabelOffset: props.yAxisLabelOffset,\n      tickFormatting: props.yAxisFormatter,\n      xOrient: props.xOrient,\n      yOrient: props.yOrient,\n      margins: props.margins,\n      width: innerWidth,\n      height: props.height,\n      gridHorizontal: props.gridHorizontal,\n      gridHorizontalStroke: props.gridHorizontalStroke,\n      gridHorizontalStrokeWidth: props.gridHorizontalStrokeWidth,\n      gridHorizontalStrokeDash: props.gridHorizontalStrokeDash\n    }), dataSeries));\n  }\n});","map":null,"metadata":{},"sourceType":"script"}