{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar d3 = require('d3');\n\nvar DataSeries = require('./DataSeries');\n\nvar utils = require('../utils');\n\nvar $__0 = require('../common'),\n    Chart = $__0.Chart,\n    XAxis = $__0.XAxis,\n    YAxis = $__0.YAxis;\n\nvar $__1 = require('../mixins'),\n    CartesianChartPropsMixin = $__1.CartesianChartPropsMixin,\n    ViewBoxMixin = $__1.ViewBoxMixin;\n\nmodule.exports = React.createClass({\n  mixins: [CartesianChartPropsMixin, ViewBoxMixin],\n  displayName: 'BarChart',\n  propTypes: {\n    chartClassName: React.PropTypes.string,\n    data: React.PropTypes.array.isRequired,\n    hoverAnimation: React.PropTypes.bool,\n    height: React.PropTypes.number,\n    margins: React.PropTypes.object,\n    rangeRoundBandsPadding: React.PropTypes.number,\n    // https://github.com/mbostock/d3/wiki/Stack-Layout#offset\n    stackOffset: React.PropTypes.oneOf(['silhouette', 'expand', 'wigget', 'zero']),\n    valuesAccessor: React.PropTypes.func,\n    title: React.PropTypes.string,\n    width: React.PropTypes.number,\n    xAxisClassName: React.PropTypes.string,\n    yAxisClassName: React.PropTypes.string,\n    yAxisTickCount: React.PropTypes.number\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      chartClassName: 'rd3-barchart',\n      hoverAnimation: true,\n      margins: {\n        top: 10,\n        right: 20,\n        bottom: 40,\n        left: 45\n      },\n      rangeRoundBandsPadding: 0.25,\n      stackOffset: 'zero',\n      valuesAccessor: function valuesAccessor(d) {\n        return d.values;\n      },\n      xAxisClassName: 'rd3-barchart-xaxis',\n      yAxisClassName: 'rd3-barchart-yaxis',\n      yAxisTickCount: 4\n    };\n  },\n  _getStackedValuesMaxY: function _getStackedValuesMaxY(_data) {\n    // in stacked bar chart, the maximum height we need for \n    // yScale domain is the sum of y0 + y\n    var $__0 = this.props,\n        valuesAccessor = $__0.valuesAccessor;\n    return d3.max(_data, function (d) {\n      return d3.max(valuesAccessor(d), function (d) {\n        // where y0, y is generated by d3.layout.stack()\n        return d.y0 + d.y;\n      });\n    });\n  },\n  _getLabels: function _getLabels(firstSeries) {\n    // we only need first series to get all the labels\n    var $__0 = this.props,\n        valuesAccessor = $__0.valuesAccessor,\n        xAccessor = $__0.xAccessor;\n    return valuesAccessor(firstSeries).map(xAccessor);\n  },\n  _stack: function _stack() {\n    var $__0 = this.props,\n        stackOffset = $__0.stackOffset,\n        xAccessor = $__0.xAccessor,\n        yAccessor = $__0.yAccessor,\n        valuesAccessor = $__0.valuesAccessor;\n    return d3.layout.stack().offset(stackOffset).x(xAccessor).y(yAccessor).values(valuesAccessor);\n  },\n  render: function render() {\n    var props = this.props;\n\n    var _data = this._stack()(props.data);\n\n    var margins = props.margins;\n    var innerHeight = props.height - (margins.top + margins.bottom);\n    var innerWidth = props.width - (margins.left + margins.right);\n    var xScale = d3.scale.ordinal().domain(this._getLabels(_data[0])).rangeRoundBands([0, innerWidth], props.rangeRoundBandsPadding);\n    var yScale = d3.scale.linear().range([innerHeight, 0]).domain([0, this._getStackedValuesMaxY(_data)]);\n    var trans = \"translate(\" + margins.left + \",\" + margins.top + \")\";\n    return React.createElement(Chart, {\n      viewBox: props.viewBox,\n      legend: props.legend,\n      data: props.data,\n      margins: props.margins,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      width: props.width,\n      height: props.height,\n      title: props.title\n    }, React.createElement(\"g\", {\n      transform: trans,\n      className: props.chartClassName\n    }, React.createElement(YAxis, {\n      yAxisClassName: props.yAxisClassName,\n      yAxisTickValues: props.yAxisTickValues,\n      yAxisLabel: props.yAxisLabel,\n      yAxisLabelOffset: props.yAxisLabelOffset,\n      yScale: yScale,\n      margins: margins,\n      yAxisTickCount: props.yAxisTickCount,\n      tickFormatting: props.yAxisFormatter,\n      width: innerWidth,\n      height: innerHeight,\n      xOrient: props.xOrient,\n      yOrient: props.yOrient,\n      gridHorizontal: props.gridHorizontal,\n      gridHorizontalStroke: props.gridHorizontalStroke,\n      gridHorizontalStrokeWidth: props.gridHorizontalStrokeWidth,\n      gridHorizontalStrokeDash: props.gridHorizontalStrokeDash\n    }), React.createElement(XAxis, {\n      xAxisClassName: props.xAxisClassName,\n      xAxisTickValues: props.xAxisTickValues,\n      xAxisLabel: props.xAxisLabel,\n      xAxisLabelOffset: props.xAxisLabelOffset,\n      xScale: xScale,\n      margins: margins,\n      tickFormatting: props.xAxisFormatter,\n      width: innerWidth,\n      height: innerHeight,\n      xOrient: props.xOrient,\n      yOrient: props.yOrient,\n      gridVertical: props.gridVertical,\n      gridVerticalStroke: props.gridVerticalStroke,\n      gridVerticalStrokeWidth: props.gridVerticalStrokeWidth,\n      gridVerticalStrokeDash: props.gridVerticalStrokeDash\n    }), React.createElement(DataSeries, {\n      yScale: yScale,\n      xScale: xScale,\n      margins: margins,\n      _data: _data,\n      width: innerWidth,\n      height: innerHeight,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      hoverAnimation: props.hoverAnimation,\n      valuesAccessor: props.valuesAccessor\n    })));\n  }\n});","map":null,"metadata":{},"sourceType":"script"}