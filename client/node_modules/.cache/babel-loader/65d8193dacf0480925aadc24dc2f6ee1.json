{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar d3 = require('d3');\n\nvar $__0 = require('../common'),\n    Chart = $__0.Chart,\n    XAxis = $__0.XAxis,\n    YAxis = $__0.YAxis;\n\nvar DataSeries = require('./DataSeries');\n\nvar utils = require('../utils');\n\nvar $__1 = require('../mixins'),\n    CartesianChartPropsMixin = $__1.CartesianChartPropsMixin,\n    ViewBoxMixin = $__1.ViewBoxMixin;\n\nmodule.exports = React.createClass({\n  mixins: [CartesianChartPropsMixin, ViewBoxMixin],\n  displayName: 'ScatterChart',\n  propTypes: {\n    circleRadius: React.PropTypes.number,\n    className: React.PropTypes.string,\n    hoverAnimation: React.PropTypes.bool,\n    margins: React.PropTypes.object,\n    xAxisClassName: React.PropTypes.string,\n    xAxisStrokeWidth: React.PropTypes.number,\n    yAxisClassName: React.PropTypes.string,\n    yAxisStrokeWidth: React.PropTypes.number\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      circleRadius: 3,\n      className: 'rd3-scatterchart',\n      hoverAnimation: true,\n      margins: {\n        top: 10,\n        right: 20,\n        bottom: 50,\n        left: 45\n      },\n      xAxisClassName: 'rd3-scatterchart-xaxis',\n      xAxisStrokeWidth: 1,\n      yAxisClassName: 'rd3-scatterchart-yaxis',\n      yAxisStrokeWidth: 1\n    };\n  },\n  _calculateScales: utils.calculateScales,\n  render: function render() {\n    var props = this.props;\n    var data = props.data;\n    var margins = props.margins;\n\n    if (!data || data.length < 1) {\n      return null;\n    } // Calculate inner chart dimensions\n\n\n    var innerWidth = this.getOuterDimensions().width - margins.left - margins.right;\n    var innerHeight = this.getOuterDimensions().height - margins.top - margins.bottom; // Returns an object of flattened allValues, xValues, and yValues\n\n    var flattenedData = utils.flattenData(data, props.xAccessor, props.yAccessor);\n    var allValues = flattenedData.allValues,\n        xValues = flattenedData.xValues,\n        yValues = flattenedData.yValues;\n\n    var scales = this._calculateScales(innerWidth, innerHeight, xValues, yValues);\n\n    var xScale = scales.xScale;\n    var yScale = scales.yScale;\n    var x = props.yAxisOffset < 0 ? margins.left + Math.abs(props.yAxisOffset) : margins.left;\n    var transform = \"translate(\" + x + \", \" + margins.top + \")\";\n    return React.createElement(Chart, {\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      data: data,\n      height: props.height,\n      legend: props.legend,\n      margins: margins,\n      title: props.title,\n      viewBox: this.getViewBox(),\n      width: props.width\n    }, React.createElement(\"g\", {\n      className: props.className,\n      transform: transform\n    }, React.createElement(XAxis, {\n      data: data,\n      height: innerHeight,\n      margins: margins,\n      stroke: props.axesColor,\n      strokeWidth: props.xAxisStrokeWidth.toString(),\n      tickFormatting: props.xAxisFormatter,\n      width: innerWidth,\n      xAxisClassName: props.xAxisClassName,\n      xAxisLabel: props.xAxisLabel,\n      xAxisLabelOffset: props.xAxisLabelOffset,\n      xAxisOffset: props.xAxisOffset,\n      xAxisTickInterval: props.xAxisTickInterval,\n      xAxisTickValues: props.xAxisTickValues,\n      xOrient: props.xOrient,\n      yOrient: props.yOrient,\n      xScale: xScale,\n      gridVertical: props.gridVertical,\n      gridVerticalStroke: props.gridVerticalStroke,\n      gridVerticalStrokeWidth: props.gridVerticalStrokeWidth,\n      gridVerticalStrokeDash: props.gridVerticalStrokeDash\n    }), React.createElement(YAxis, {\n      data: data,\n      width: innerWidth,\n      height: innerHeight,\n      margins: margins,\n      stroke: props.axesColor,\n      strokeWidth: props.yAxisStrokeWidth.toString(),\n      tickFormatting: props.yAxisFormatter,\n      yAxisClassName: props.yAxisClassName,\n      yAxisLabel: props.yAxisLabel,\n      yAxisLabelOffset: props.yAxisLabelOffset,\n      yAxisOffset: props.yAxisOffset,\n      yAxisTickValues: props.yAxisTickValues,\n      yAxisTickCount: props.yAxisTickCount,\n      yScale: yScale,\n      xOrient: props.xOrient,\n      yOrient: props.yOrient,\n      gridHorizontal: props.gridHorizontal,\n      gridHorizontalStroke: props.gridHorizontalStroke,\n      gridHorizontalStrokeWidth: props.gridHorizontalStrokeWidth,\n      gridHorizontalStrokeDash: props.gridHorizontalStrokeDash\n    }), React.createElement(DataSeries, {\n      circleRadius: props.circleRadius,\n      colors: props.colors,\n      colorAccessor: props.colorAccessor,\n      data: allValues,\n      height: innerHeight,\n      hoverAnimation: props.hoverAnimation,\n      width: innerWidth,\n      xAccessor: props.xAccessor,\n      xScale: xScale,\n      yAccessor: props.yAccessor,\n      yScale: yScale\n    })));\n  }\n});","map":null,"metadata":{},"sourceType":"script"}