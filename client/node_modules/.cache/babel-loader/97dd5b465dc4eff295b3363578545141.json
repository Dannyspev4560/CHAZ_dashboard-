{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\src\\\\DashboardBody.js\",\n    _this2 = this;\n\nimport React from 'react';\nimport './DashboardBody.css';\nimport Progress from './DashboradBody/Progress';\nimport CycleGraph from './DashboradBody/CycleGraph';\nimport CycleTable from './DashboradBody/CycleTable';\nimport OvensView from './DashboradBody/OvensView.js';\nimport axios from 'axios';\nimport Title from './Title';\nimport FilterBar from './DashboradBody/FilterBar';\n\nvar DashboardBody =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DashboardBody, _React$Component);\n\n  function DashboardBody(props) {\n    var _this;\n\n    _classCallCheck(this, DashboardBody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DashboardBody).call(this, props));\n\n    _this.getDataFromDb = function () {\n      //TODO: my data is an array, so i need to iterate over the array using Array.prototype.map()- to work the right way.\n      axios.get('http://localhost:3002/api/cycles', {}).then(function (res) {\n        _this.setState({\n          table_data: res.data\n        });\n\n        console.log(_this.state.table_data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n      axios.get('http://localhost:3002/api/executions', {}).then(function (res) {\n        _this.setState({\n          executions_data: res.data\n        });\n\n        console.log(_this.state.executions_data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n      axios.get('http://localhost:3002/api/chamber', {}).then(function (res) {\n        _this.setState({\n          chamber_data: res.data\n        });\n\n        console.log(_this.state.chamber_data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n      axios.get('http://localhost:3002/api/ovenUtil', {}).then(function (res) {\n        _this.setState({\n          setups_status: res.data\n        }); //here im returning res instead of res.data\n\n\n        console.log(_this.state.setups_status);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.updateDB = function (idToUpdate, updateToApply) {\n      axios.post(\"http://localhost:3002/api/updateData\", {\n        id: idToUpdate,\n        update: {\n          message: updateToApply\n        }\n      }).then(function (response) {\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n        window.alert(error);\n      });\n    };\n\n    _this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      objectToUpdate: null,\n      loading: true,\n      table_data: [],\n      executions_data: [],\n      chamber_data: [],\n      setups_status: [],\n      activeIndex: null,\n      DB: 0,\n      Oven: 0,\n      cycle: 0\n    };\n    _this.getDataFromDb = _this.getDataFromDb.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DashboardBody, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 12000000); //timeout currently one minute\n\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    }\n  }, {\n    key: \"ConvObjToArr_ovenData\",\n    value: function ConvObjToArr_ovenData() {\n      var mappedOvenData = new Map();\n\n      if (this.state.chamber_data.length > 0 && this.state.setups_status.length > 0) {\n        var chamber = this.state.chamber_data[0];\n        var setups = this.state.setups_status;\n\n        for (var k in chamber) {\n          mappedOvenData.set(k, chamber[k]);\n        }\n\n        var arr = [];\n        var cnt = 0;\n\n        for (var i = 0; i < setups.length; i++) {\n          for (var z in setups[i]) {\n            arr[cnt] = setups[i][z];\n\n            if (cnt === 1) {\n              mappedOvenData.set(arr[1], arr[0]);\n              cnt = 0;\n            } else {\n              cnt++;\n            }\n\n            ;\n          }\n        }\n      }\n\n      return mappedOvenData;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"sidebar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(FilterBar, {\n        DB: this.state.DB,\n        Oven: this.state.Oven,\n        cycle: this.state.cycle,\n        onSectionSubmit: this.updateRun(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"dash\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Progress, {\n        data: this.state.executions_data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(CycleTable, {\n        data: this.state.table_data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"stats\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          marginLeft: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Analytics: \"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \" PEC - EOL :FLX 74890\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \" FLX64332 has failed last 4 tests\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \" DMElinkStartUp fail occured 12 times \"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \" 12 Jiras have benn assigned.. \"))), React.createElement(\"div\", {\n        className: \"chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(CycleGraph, {\n        data: this.state.table_data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"ovens\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(OvensView, {\n        data: this.ConvObjToArr_ovenData(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return DashboardBody;\n}(React.Component);\n\nvar postView = React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 174\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  style: {\n    width: \"100px\"\n  },\n  onChange: function onChange(e) {\n    return _this2.setState({\n      idToUpdate: e.target.value\n    });\n  },\n  placeholder: \"id\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 175\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  style: {\n    width: \"100px\"\n  },\n  onChange: function onChange(e) {\n    return _this2.setState({\n      updateToApply: e.target.value\n    });\n  },\n  placeholder: \"value\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 181\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  onClick: function onClick() {\n    return _this2.updateDB(_this2.state.idToUpdate, _this2.state.updateToApply);\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 187\n  },\n  __self: this\n}, \"Send Data To Backend\"));\nexport default DashboardBody;","map":{"version":3,"sources":["C:\\Users\\7316093\\CHAZ_Dash\\fullstack_app\\client\\src\\DashboardBody.js"],"names":["React","Progress","CycleGraph","CycleTable","OvensView","axios","Title","FilterBar","DashboardBody","props","getDataFromDb","get","then","res","setState","table_data","data","console","log","state","catch","error","executions_data","chamber_data","setups_status","updateDB","idToUpdate","updateToApply","post","id","update","message","response","window","alert","intervalIsSet","objectToUpdate","loading","activeIndex","DB","Oven","cycle","bind","interval","setInterval","clearInterval","mappedOvenData","Map","length","chamber","setups","k","set","arr","cnt","i","z","updateRun","marginLeft","ConvObjToArr_ovenData","Component","postView","width","e","target","value"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;;IAGMC,a;;;;;AACF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,uFAAMA,KAAN;;AADe,UAwCnBC,aAxCmB,GAwCH,YAAK;AACjB;AAEAL,MAAAA,KAAK,CAACM,GAAN,CAAU,kCAAV,EAA8C,EAA9C,EACKC,IADL,CACU,UAACC,GAAD,EAAS;AACX,cAAKC,QAAL,CAAc;AAACC,UAAAA,UAAU,EAAEF,GAAG,CAACG;AAAjB,SAAd;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAKC,KAAL,CAAWJ,UAAvB;AACH,OAJL,EAKKK,KALL,CAKW,UAAUC,KAAV,EAAiB;AACpBJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,OAPL;AAQAhB,MAAAA,KAAK,CAACM,GAAN,CAAU,sCAAV,EAAkD,EAAlD,EACKC,IADL,CACU,UAACC,GAAD,EAAS;AACX,cAAKC,QAAL,CAAc;AAACQ,UAAAA,eAAe,EAAET,GAAG,CAACG;AAAtB,SAAd;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAKC,KAAL,CAAWG,eAAvB;AACH,OAJL,EAKKF,KALL,CAKW,UAAUC,KAAV,EAAiB;AACpBJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,OAPL;AAQAhB,MAAAA,KAAK,CAACM,GAAN,CAAU,mCAAV,EAA8C,EAA9C,EACKC,IADL,CACU,UAACC,GAAD,EAAO;AACT,cAAKC,QAAL,CAAc;AAACS,UAAAA,YAAY,EAACV,GAAG,CAACG;AAAlB,SAAd;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAKC,KAAL,CAAWI,YAAvB;AACP,OAJD,EAKKH,KALL,CAKW,UAAUC,KAAV,EAAiB;AACpBJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,OAPL;AAQIhB,MAAAA,KAAK,CAACM,GAAN,CAAU,oCAAV,EAA+C,EAA/C,EACKC,IADL,CACU,UAACC,GAAD,EAAO;AACT,cAAKC,QAAL,CAAc;AAACU,UAAAA,aAAa,EAACX,GAAG,CAACG;AAAnB,SAAd,EADS,CAC+B;;;AACxCC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAKC,KAAL,CAAWK,aAAvB;AACH,OAJL,EAKKJ,KALL,CAKW,UAAUC,KAAV,EAAiB;AACpBJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,OAPL;AAQP,KA3EkB;;AAAA,UA6EnBI,QA7EmB,GA6ER,UAACC,UAAD,EAAaC,aAAb,EAA+B;AACtCtB,MAAAA,KAAK,CAACuB,IAAN,CAAW,sCAAX,EAAmD;AAC/CC,QAAAA,EAAE,EAAEH,UAD2C;AAE/CI,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAEJ;AAAX;AAFuC,OAAnD,EAGGf,IAHH,CAGQ,UAAUoB,QAAV,EAAoB;AAExBf,QAAAA,OAAO,CAACC,GAAR,CAAYc,QAAZ;AACH,OAND,EAOKZ,KAPL,CAOW,UAAUC,KAAV,EAAiB;AACpBJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAY,QAAAA,MAAM,CAACC,KAAP,CAAab,KAAb;AACH,OAVL;AAWH,KAzFkB;;AAGf,UAAKF,KAAL,GAAa;AACTH,MAAAA,IAAI,EAAE,EADG;AAETa,MAAAA,EAAE,EAAE,CAFK;AAGTE,MAAAA,OAAO,EAAE,IAHA;AAITI,MAAAA,aAAa,EAAE,KAJN;AAKTC,MAAAA,cAAc,EAAE,IALP;AAMTC,MAAAA,OAAO,EAAE,IANA;AAOTtB,MAAAA,UAAU,EAAE,EAPH;AAQTO,MAAAA,eAAe,EAAC,EARP;AASTC,MAAAA,YAAY,EAAC,EATJ;AAUTC,MAAAA,aAAa,EAAC,EAVL;AAWTc,MAAAA,WAAW,EAAE,IAXJ;AAYTC,MAAAA,EAAE,EAAC,CAZM;AAaTC,MAAAA,IAAI,EAAC,CAbI;AAcTC,MAAAA,KAAK,EAAC;AAdG,KAAb;AAiBA,UAAK/B,aAAL,GAAqB,MAAKA,aAAL,CAAmBgC,IAAnB,uDAArB;AApBe;AAqBlB;;;;wCAGmB;AAChB,WAAKhC,aAAL;;AACA,UAAI,CAAC,KAAKS,KAAL,CAAWgB,aAAhB,EAA+B;AAC3B,YAAIQ,QAAQ,GAAGC,WAAW,CAAC,KAAKlC,aAAN,EAAqB,QAArB,CAA1B,CAD2B,CAC8B;;AACzD,aAAKI,QAAL,CAAc;AAAEqB,UAAAA,aAAa,EAAEQ;AAAjB,SAAd;AACH;AACJ;;;2CAEsB;AACnB,UAAI,KAAKxB,KAAL,CAAWgB,aAAf,EAA8B;AAC1BU,QAAAA,aAAa,CAAC,KAAK1B,KAAL,CAAWgB,aAAZ,CAAb;AACA,aAAKrB,QAAL,CAAc;AAAEqB,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACH;AACJ;;;4CAsDsB;AACnB,UAAIW,cAAc,GAAC,IAAIC,GAAJ,EAAnB;;AACA,UAAI,KAAK5B,KAAL,CAAWI,YAAX,CAAwByB,MAAxB,GAA+B,CAA/B,IAAoC,KAAK7B,KAAL,CAAWK,aAAX,CAAyBwB,MAAzB,GAAgC,CAAxE,EAA0E;AACtE,YAAMC,OAAO,GAAC,KAAK9B,KAAL,CAAWI,YAAX,CAAwB,CAAxB,CAAd;AACA,YAAM2B,MAAM,GAAC,KAAK/B,KAAL,CAAWK,aAAxB;;AACA,aAAI,IAAI2B,CAAR,IAAaF,OAAb,EACA;AACIH,UAAAA,cAAc,CAACM,GAAf,CAAmBD,CAAnB,EAAqBF,OAAO,CAACE,CAAD,CAA5B;AACH;;AACD,YAAIE,GAAG,GAAC,EAAR;AACA,YAAIC,GAAG,GAAC,CAAR;;AACA,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACL,MAAM,CAACF,MAArB,EAA4BO,CAAC,EAA7B,EACA;AAEI,eAAI,IAAIC,CAAR,IAAaN,MAAM,CAACK,CAAD,CAAnB,EAAwB;AACpBF,YAAAA,GAAG,CAACC,GAAD,CAAH,GAASJ,MAAM,CAACK,CAAD,CAAN,CAAUC,CAAV,CAAT;;AACA,gBAAGF,GAAG,KAAG,CAAT,EAAW;AACPR,cAAAA,cAAc,CAACM,GAAf,CAAmBC,GAAG,CAAC,CAAD,CAAtB,EAA0BA,GAAG,CAAC,CAAD,CAA7B;AACAC,cAAAA,GAAG,GAAC,CAAJ;AACH,aAHD,MAII;AAACA,cAAAA,GAAG;AAAG;;AAAA;AACd;AACJ;AACJ;;AACD,aAAOR,cAAP;AACH;;;6BAIQ;AAEL,aACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAL,CADJ,CADJ,CADJ,EAMI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAE,KAAK3B,KAAL,CAAWoB,EAA1B;AAA8B,QAAA,IAAI,EAAE,KAAKpB,KAAL,CAAWqB,IAA/C;AAAqD,QAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWsB,KAAvE;AAA8E,QAAA,eAAe,EAAE,KAAKgB,SAAL,CAAe,IAAf,CAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CANJ,EASI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACQ;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAE,KAAKtC,KAAL,CAAWG,eAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADR,EAIQ;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAE,KAAKH,KAAL,CAAWJ,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJR,EAQQ;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,KAAK,EAAE;AAAC2C,UAAAA,UAAU,EAAC;AAAZ,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAJJ,CAFJ,CARR,EAiBQ;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAE,KAAKvC,KAAL,CAAWJ,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAjBR,EAoBQ;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAW,QAAA,IAAI,EAAE,KAAK4C,qBAAL,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CApBR,CATJ,CADJ;AAoCH;;;;EA/JuB3D,KAAK,CAAC4D,S;;AAkKlC,IAAIC,QAAQ,GAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACV;AACI,EAAA,IAAI,EAAC,MADT;AAEI,EAAA,KAAK,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAFX;AAGI,EAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,WAAI,MAAI,CAACjD,QAAL,CAAc;AAAEY,MAAAA,UAAU,EAAEqC,CAAC,CAACC,MAAF,CAASC;AAAvB,KAAd,CAAJ;AAAA,GAHf;AAII,EAAA,WAAW,EAAC,IAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADU,EAOV;AACI,EAAA,IAAI,EAAC,MADT;AAEI,EAAA,KAAK,EAAE;AAAEH,IAAAA,KAAK,EAAE;AAAT,GAFX;AAGI,EAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,WAAI,MAAI,CAACjD,QAAL,CAAc;AAAEa,MAAAA,aAAa,EAAEoC,CAAC,CAACC,MAAF,CAASC;AAA1B,KAAd,CAAJ;AAAA,GAHf;AAII,EAAA,WAAW,EAAC,OAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAPU,EAaV;AACI,EAAA,OAAO,EAAE;AAAA,WACL,MAAI,CAACxC,QAAL,CAAc,MAAI,CAACN,KAAL,CAAWO,UAAzB,EAAqC,MAAI,CAACP,KAAL,CAAWQ,aAAhD,CADK;AAAA,GADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAbU,CAAd;AAsBA,eAAenB,aAAf","sourcesContent":["import React from 'react';\r\nimport './DashboardBody.css';\r\nimport Progress from './DashboradBody/Progress';\r\nimport CycleGraph from './DashboradBody/CycleGraph';\r\nimport CycleTable from './DashboradBody/CycleTable';\r\nimport OvensView from './DashboradBody/OvensView.js';\r\nimport axios from 'axios';\r\nimport Title from './Title';\r\nimport FilterBar from './DashboradBody/FilterBar';\r\n\r\n\r\nclass DashboardBody extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            id: 0,\r\n            message: null,\r\n            intervalIsSet: false,\r\n            objectToUpdate: null,\r\n            loading: true,\r\n            table_data: [],\r\n            executions_data:[],\r\n            chamber_data:[],\r\n            setups_status:[],\r\n            activeIndex: null,\r\n            DB:0,\r\n            Oven:0,\r\n            cycle:0,\r\n        };\r\n\r\n        this.getDataFromDb = this.getDataFromDb.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getDataFromDb();\r\n        if (!this.state.intervalIsSet) {\r\n            let interval = setInterval(this.getDataFromDb, 12000000);//timeout currently one minute\r\n            this.setState({ intervalIsSet: interval });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.intervalIsSet) {\r\n            clearInterval(this.state.intervalIsSet);\r\n            this.setState({ intervalIsSet: null });\r\n        }\r\n    }\r\n\r\n\r\n    getDataFromDb = ()=> {\r\n        //TODO: my data is an array, so i need to iterate over the array using Array.prototype.map()- to work the right way.\r\n\r\n        axios.get('http://localhost:3002/api/cycles', {})\r\n            .then((res) => {\r\n                this.setState({table_data: res.data});\r\n                console.log(this.state.table_data);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n        axios.get('http://localhost:3002/api/executions', {})\r\n            .then((res) => {\r\n                this.setState({executions_data: res.data});\r\n                console.log(this.state.executions_data);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n        axios.get('http://localhost:3002/api/chamber',{})\r\n            .then((res)=>{\r\n                this.setState({chamber_data:res.data});\r\n                console.log(this.state.chamber_data);\r\n        })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n            axios.get('http://localhost:3002/api/ovenUtil',{})\r\n                .then((res)=>{\r\n                    this.setState({setups_status:res.data});//here im returning res instead of res.data\r\n                    console.log(this.state.setups_status);\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                });\r\n    }\r\n\r\n    updateDB = (idToUpdate, updateToApply) => {\r\n        axios.post(\"http://localhost:3002/api/updateData\", {\r\n            id: idToUpdate,\r\n            update: { message: updateToApply }\r\n        }).then(function (response) {\r\n\r\n            console.log(response);\r\n        })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                window.alert(error);\r\n            });\r\n    };\r\n\r\n    ConvObjToArr_ovenData(){\r\n        var mappedOvenData=new Map();\r\n        if (this.state.chamber_data.length>0 && this.state.setups_status.length>0){\r\n            const chamber=this.state.chamber_data[0];\r\n            const setups=this.state.setups_status;\r\n            for(var k in chamber )\r\n            {\r\n                mappedOvenData.set(k,chamber[k])\r\n            }\r\n            let arr=[];\r\n            let cnt=0;\r\n            for(let i=0;i<setups.length;i++)\r\n            {\r\n\r\n                for(var z in setups[i] ){\r\n                    arr[cnt]=setups[i][z];\r\n                    if(cnt===1){\r\n                        mappedOvenData.set(arr[1],arr[0]);\r\n                        cnt=0;\r\n                    }\r\n                    else{cnt++};\r\n                }\r\n            }\r\n        }\r\n        return mappedOvenData;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"grid-container\">\r\n                <div className=\"header\">\r\n                    <div className=\"\">\r\n                        <h1 ><Title/></h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"sidebar\">\r\n                   <FilterBar DB={this.state.DB} Oven={this.state.Oven} cycle={this.state.cycle} onSectionSubmit={this.updateRun(this,)}/>\r\n                </div>\r\n                <div className=\"dash\">\r\n                        <div className=\"status\">\r\n                            <Progress data={this.state.executions_data}/>\r\n                        </div>\r\n                        <div className=\"table\">\r\n                            <CycleTable data={this.state.table_data}/>\r\n                            {/*{postView}*/}\r\n                        </div>\r\n                        <div className=\"stats\">\r\n                            <h2 style={{marginLeft:5}}>Analytics: </h2>\r\n                            <ul>\r\n                                <li> PEC - EOL :FLX 74890</li>\r\n                                <li> FLX64332 has failed last 4 tests</li>\r\n                                <li> DMElinkStartUp fail occured 12 times </li>\r\n                                <li> 12 Jiras have benn assigned.. </li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"chart\">\r\n                            <CycleGraph data={this.state.table_data}/>\r\n                        </div>\r\n                        <div className=\"ovens\">\r\n                            <OvensView data={this.ConvObjToArr_ovenData()} />\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet postView= <div>\r\n    <input\r\n        type=\"text\"\r\n        style={{ width: \"100px\" }}\r\n        onChange={e => this.setState({ idToUpdate: e.target.value })}\r\n        placeholder=\"id\"\r\n    />\r\n    <input\r\n        type=\"text\"\r\n        style={{ width: \"100px\" }}\r\n        onChange={e => this.setState({ updateToApply: e.target.value })}\r\n        placeholder=\"value\"\r\n    />\r\n    <button\r\n        onClick={() =>\r\n            this.updateDB(this.state.idToUpdate, this.state.updateToApply)\r\n        }\r\n    >\r\n        Send Data To Backend\r\n    </button>\r\n</div>\r\n\r\nexport default DashboardBody;"]},"metadata":{},"sourceType":"module"}