{"ast":null,"code":"import _classCallCheck from \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport './mainpage.css';\nimport DashboardBody from './DashboardBody';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      objectToUpdate: null\n    };\n\n    _this.getDataFromDb = function () {\n      axios.get('http://localhost:3002/api/getData', {}).then(function (response) {\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n        alert(error);\n      }); // fetch(\"http://localhost:3002/api/getData\")\n      //   .then(data => data.json())\n      //   .then(res => this.setState({ data: res.data }));\n    };\n\n    _this.updateDB = function (idToUpdate, updateToApply) {\n      axios.post(\"http://localhost:3002/api/updateData\", {\n        id: idToUpdate,\n        update: {\n          message: updateToApply\n        }\n      }).then(function (response) {\n        console.log(response);\n        window.alert(response);\n      }).catch(function (error) {\n        console.log(error);\n        window.alert(error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has \n    // changed and implement those changes into our UI\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 5000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var data = this.state.data;\n      return React.createElement(\"div\", {\n        style: {\n          padding: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"script\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"CHAZ Dashboard\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(DashboardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: \"100px\"\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idToUpdate: e.target.value\n          });\n        },\n        placeholder: \"id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: \"100px\"\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            updateToApply: e.target.value\n          });\n        },\n        placeholder: \"value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.updateDB(_this2.state.idToUpdate, _this2.state.updateToApply);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Send Data To Backend\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Projects\\NodeJS\\fullstack_app\\client\\src\\App.js"],"names":["React","Component","axios","DashboardBody","App","state","data","id","message","intervalIsSet","objectToUpdate","getDataFromDb","get","then","response","console","log","catch","error","alert","updateDB","idToUpdate","updateToApply","post","update","window","interval","setInterval","setState","clearInterval","padding","width","e","target","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,EAAE,EAAE,CAFE;AAGNC,MAAAA,OAAO,EAAE,IAHH;AAINC,MAAAA,aAAa,EAAE,KAJT;AAKNC,MAAAA,cAAc,EAAE;AALV,K;;UA0BRC,a,GAAgB,YAAM;AACpBT,MAAAA,KAAK,CAACU,GAAN,CAAU,mCAAV,EAA8C,EAA9C,EAECC,IAFD,CAEM,UAAUC,QAAV,EAAoB;AACxBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,OAJD,EAKCG,KALD,CAKO,UAAUC,KAAV,EAAiB;AACtBH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACAC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD,OARD,EADoB,CAWpB;AACA;AACA;AACD,K;;UAEDE,Q,GAAW,UAACC,UAAD,EAAaC,aAAb,EAA+B;AACxCpB,MAAAA,KAAK,CAACqB,IAAN,CAAW,sCAAX,EAAmD;AACjDhB,QAAAA,EAAE,EAAEc,UAD6C;AAEjDG,QAAAA,MAAM,EAAE;AAAEhB,UAAAA,OAAO,EAAEc;AAAX;AAFyC,OAAnD,EAGGT,IAHH,CAGQ,UAAUC,QAAV,EAAoB;AAC1BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAW,QAAAA,MAAM,CAACN,KAAP,CAAaL,QAAb;AACD,OAND,EAOCG,KAPD,CAOO,UAAUC,KAAV,EAAiB;AACtBH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACAO,QAAAA,MAAM,CAACN,KAAP,CAAaD,KAAb;AACD,OAVD;AAWD,K;;;;;;;AA9CD;AACA;AACA;wCACoB;AAClB,WAAKP,aAAL;;AACA,UAAI,CAAC,KAAKN,KAAL,CAAWI,aAAhB,EAA+B;AAC7B,YAAIiB,QAAQ,GAAGC,WAAW,CAAC,KAAKhB,aAAN,EAAqB,IAArB,CAA1B;AACA,aAAKiB,QAAL,CAAc;AAAEnB,UAAAA,aAAa,EAAEiB;AAAjB,SAAd;AACD;AACF;;;2CAEsB;AACrB,UAAI,KAAKrB,KAAL,CAAWI,aAAf,EAA8B;AAC5BoB,QAAAA,aAAa,CAAC,KAAKxB,KAAL,CAAWI,aAAZ,CAAb;AACA,aAAKmB,QAAL,CAAc;AAAEnB,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACD;AACF;;;6BAiCQ;AAAA;;AAAA,UACCH,IADD,GACU,KAAKD,KADf,CACCC,IADD;AAEP,aACE;AAAK,QAAA,KAAK,EAAE;AAACwB,UAAAA,OAAO,EAAC;AAAT,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CADJ,CADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CANF,EASE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFT;AAGE,QAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,iBAAI,MAAI,CAACJ,QAAL,CAAc;AAAEP,YAAAA,UAAU,EAAEW,CAAC,CAACC,MAAF,CAASC;AAAvB,WAAd,CAAJ;AAAA,SAHb;AAIE,QAAA,WAAW,EAAC,IAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,EAeE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAE;AAAEH,UAAAA,KAAK,EAAE;AAAT,SAFT;AAGE,QAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,iBAAI,MAAI,CAACJ,QAAL,CAAc;AAAEN,YAAAA,aAAa,EAAEU,CAAC,CAACC,MAAF,CAASC;AAA1B,WAAd,CAAJ;AAAA,SAHb;AAIE,QAAA,WAAW,EAAC,OAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfF,EAqBE;AACE,QAAA,OAAO,EAAE;AAAA,iBACP,MAAI,CAACd,QAAL,CAAc,MAAI,CAACf,KAAL,CAAWgB,UAAzB,EAAqC,MAAI,CAAChB,KAAL,CAAWiB,aAAhD,CADO;AAAA,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCArBF,CADF;AA+BD;;;;EA3FerB,S;;AA8FlB,eAAeG,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport './mainpage.css'\nimport DashboardBody from './DashboardBody'\n\nclass App extends Component {\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    objectToUpdate: null\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has \n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 5000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  getDataFromDb = () => {\n    axios.get('http://localhost:3002/api/getData',{\n    })\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n      alert(error);\n    });\n\n    // fetch(\"http://localhost:3002/api/getData\")\n    //   .then(data => data.json())\n    //   .then(res => this.setState({ data: res.data }));\n  };\n\n  updateDB = (idToUpdate, updateToApply) => {\n    axios.post(\"http://localhost:3002/api/updateData\", {\n      id: idToUpdate,\n      update: { message: updateToApply }\n    }).then(function (response) {\n      console.log(response);\n      window.alert(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n      window.alert(error);\n    });\n  };\n\n\n  render() {\n    const { data } = this.state;\n    return (\n      <div style={{padding:\"20px\"}}>\n        <div className=\"title\">\n            <div className=\"shadow\">\n                <h1 className=\"script\">CHAZ Dashboard</h1>\n            </div>\n        </div>\n        <div>\n            <DashboardBody/>\n        </div>\n        <input\n          type=\"text\"\n          style={{ width: \"100px\" }}\n          onChange={e => this.setState({ idToUpdate: e.target.value })}\n          placeholder=\"id\"\n        />\n        <input\n          type=\"text\"\n          style={{ width: \"100px\" }}\n          onChange={e => this.setState({ updateToApply: e.target.value })}\n          placeholder=\"value\"\n        />\n        <button\n          onClick={() =>\n            this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n          }\n        >\n          Send Data To Backend\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}