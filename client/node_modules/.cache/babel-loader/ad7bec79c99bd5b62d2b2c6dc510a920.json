{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\7316093\\\\CHAZ_Dash\\\\fullstack_app\\\\client\\\\src\\\\DashboradBody\\\\Progress.js\";\nimport React from 'react';\nimport './Progress.css';\nimport PieChart from 'react-minimal-pie-chart';\nimport Loader from '../reusableComponents/Loader';\n\nfunction progressCalc(data) {\n  var array = [];\n  var runningAndCompleted = 0;\n  var failed = 0;\n\n  for (var i = 0; i <= data.length; i++) {\n    for (var k in data[i]) {\n      if (k == 'Status') {\n        if (data[i][k] == 'TimeOut' || data[i][k] == 'Completed' || data[i][k] == 'Running') {\n          runningAndCompleted++;\n        }\n      }\n    }\n  }\n\n  for (var z = 0; z <= data.length; z++) {\n    for (var b in data[z]) {\n      if (b == 'Result') {\n        if (data[z][b] == 'FailWithException') {\n          failed++;\n        }\n      }\n    }\n  }\n\n  array[0] = Math.round(runningAndCompleted / data.length * 100);\n  array[1] = failed;\n  array[2] = Math.round((runningAndCompleted - failed) / data.length * 100);\n  return array;\n}\n\nvar Progress = function Progress(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, props.data.length > 0 ? React.createElement(\"div\", {\n    className: \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"parameters\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Progress\"), React.createElement(PieChart, {\n    data: [{\n      value: progressCalc(props.data)[0],\n      color: progressCalc(props.data)[0] > 80 ? '#50c156' : '#e3e34f'\n    }],\n    style: {\n      height: '70px'\n    },\n    totalValue: 100,\n    lineWidth: 20,\n    label: function label(_ref) {\n      var data = _ref.data,\n          dataIndex = _ref.dataIndex;\n      return Math.round(data[dataIndex].percentage) + '%';\n    },\n    labelStyle: {\n      fontSize: '25px',\n      fontFamily: 'sans-serif'\n    },\n    labelPosition: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"parameters\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    style: {\n      padding: '2em 2em'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Failed: \", React.createElement(\"span\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, progressCalc(props.data)[1])))), React.createElement(\"div\", {\n    className: \"parameters\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Pass Rate\"), React.createElement(PieChart, {\n    data: [{\n      value: progressCalc(props.data)[2],\n      color: progressCalc(props.data)[2] > 75 ? '#50c156' : '#e3e34f'\n    }],\n    style: {\n      height: '70px'\n    },\n    totalValue: 100,\n    lineWidth: 20,\n    label: function label(_ref2) {\n      var data = _ref2.data,\n          dataIndex = _ref2.dataIndex;\n      return Math.round(data[dataIndex].percentage) + '%';\n    },\n    labelStyle: {\n      fontSize: '25px',\n      fontFamily: 'sans-serif'\n    },\n    labelPosition: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }))) : React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }));\n};\n\nexport default Progress;","map":{"version":3,"sources":["C:\\Users\\7316093\\CHAZ_Dash\\fullstack_app\\client\\src\\DashboradBody\\Progress.js"],"names":["React","PieChart","Loader","progressCalc","data","array","runningAndCompleted","failed","i","length","k","z","b","Math","round","Progress","props","value","color","height","dataIndex","percentage","fontSize","fontFamily","padding"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './Progress.css';\r\nimport PieChart from 'react-minimal-pie-chart';\r\nimport Loader from '../reusableComponents/Loader';\r\n\r\n\r\n function progressCalc(data) {\r\n\r\n     let array = [];\r\n     let runningAndCompleted = 0;\r\n     let failed = 0;\r\n     for (var i = 0; i <= data.length; i++) {\r\n         for (var k in data[i]) {\r\n             if (k == 'Status') {\r\n                 if (data[i][k] == 'TimeOut' || data[i][k] == 'Completed' || data[i][k] == 'Running') {\r\n                     runningAndCompleted++;\r\n                 }\r\n             }\r\n         }\r\n     }\r\n     for (var z = 0; z <= data.length; z++) {\r\n         for (var b in data[z]) {\r\n             if (b == 'Result') {\r\n                 if (data[z][b] == 'FailWithException') {\r\n                     failed++;\r\n                 }\r\n             }\r\n         }\r\n     }\r\n         array[0] = Math.round((runningAndCompleted / data.length) * 100);\r\n         array[1] = failed;\r\n         array[2]= Math.round(((runningAndCompleted-failed) / data.length) * 100);\r\n        return array;\r\n\r\n }\r\n     const Progress = (props) => {\r\n\r\n         return (\r\n             <div>{props.data.length>0 ? (\r\n                 <div className=\"wrapper\">\r\n                         <div className=\"parameters\">\r\n                             <div>Progress</div>\r\n                             <PieChart\r\n                                 data={[{\r\n                                     value: progressCalc(props.data)[0],\r\n                                     color: progressCalc(props.data)[0] >80 ? '#50c156': '#e3e34f'\r\n                                 }]}\r\n                                 style={{height: '70px'}}\r\n                                 totalValue={100}\r\n                                 lineWidth={20}\r\n                                 label={({ data, dataIndex }) =>\r\n                                     Math.round(data[dataIndex].percentage) + '%'\r\n                                 }\r\n                                 labelStyle={{\r\n                                     fontSize: '25px',\r\n                                     fontFamily: 'sans-serif'\r\n                                 }}\r\n                                 labelPosition={0}\r\n                             />\r\n\r\n                         </div>\r\n                         <div className=\"parameters\">\r\n                             <div ><span style={{padding:'2em 2em'}}>Failed: <span style={{color:'red'}}>{progressCalc(props.data)[1]}</span></span></div>\r\n                         </div>\r\n                        <div className=\"parameters\">\r\n                            <div>Pass Rate</div>\r\n                            <PieChart\r\n                                data={[{\r\n                                    value: progressCalc(props.data)[2],\r\n                                    color: progressCalc(props.data)[2] >75 ? '#50c156': '#e3e34f'\r\n                                }]}\r\n                                style={{height: '70px'}}\r\n                                totalValue={100}\r\n                                lineWidth={20}\r\n                                label={({ data, dataIndex }) =>\r\n                                    Math.round(data[dataIndex].percentage) + '%'\r\n                                }\r\n                                labelStyle={{\r\n                                    fontSize: '25px',\r\n                                    fontFamily: 'sans-serif'\r\n                                }}\r\n                                labelPosition={0}\r\n                            />\r\n\r\n                        </div>\r\n\r\n                 </div>\r\n                 ):(\r\n                     <Loader/>\r\n                 )\r\n             }\r\n             </div>\r\n         )\r\n     }\r\n\r\n\r\n\r\nexport default Progress;"]},"metadata":{},"sourceType":"module"}