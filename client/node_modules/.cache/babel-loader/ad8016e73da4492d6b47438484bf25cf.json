{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar d3 = require('d3');\n\nvar CellContainer = require('./CellContainer');\n\nmodule.exports = React.createClass({\n  displayName: 'DataSeries',\n  propTypes: {\n    data: React.PropTypes.array,\n    colors: React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      data: [],\n      colors: d3.scale.category20c(),\n      colorAccessor: function colorAccessor(d, idx) {\n        return idx;\n      }\n    };\n  },\n  render: function render() {\n    var props = this.props;\n    var treemap = d3.layout.treemap() // make sure calculation loop through all objects inside array\n    .children(function (d) {\n      return d;\n    }).size([props.width, props.height]).sticky(true).value(function (d) {\n      return d.value;\n    });\n    var tree = treemap(props.data);\n    var cells = tree.map(function (node, idx) {\n      return React.createElement(CellContainer, {\n        key: idx,\n        x: node.x,\n        y: node.y,\n        width: node.dx,\n        height: node.dy,\n        fill: props.colors(props.colorAccessor(node, idx)),\n        label: node.label,\n        fontSize: props.fontSize,\n        textColor: props.textColor,\n        hoverAnimation: props.hoverAnimation\n      });\n    }, this);\n    return React.createElement(\"g\", {\n      transform: props.transform,\n      className: \"treemap\"\n    }, cells);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}