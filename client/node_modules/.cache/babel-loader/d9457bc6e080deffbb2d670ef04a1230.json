{"ast":null,"code":"import _classCallCheck from \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Projects\\\\NodeJS\\\\fullstack_app\\\\client\\\\src\\\\App.js\";\n// /client/App.js\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport './mainpage.css';\nimport DashboardBody from './DashboardBody';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    _this.getDataFromDb = function () {// fetch(\"http://localhost:3002/api/getData\")\n      //   .then(data => data.json())\n      //   .then(res => this.setState({ data: res.data }));\n    };\n\n    _this.putDataToDB = function (message) {\n      var currentIds = _this.state.data.map(function (data) {\n        return data.id;\n      });\n\n      var idToBeAdded = 0; // while (currentIds.includes(idToBeAdded)) {\n      //   ++idToBeAdded;\n      // }\n      // axios.post(\"http://localhost:3002/api/putData\", {\n      //   id: idToBeAdded,\n      //   message: message\n      // });\n    };\n\n    _this.deleteFromDB = function (idTodelete) {\n      var objIdToDelete = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id == idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n\n      axios.delete(\"http://localhost:3002/api/deleteData\", {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    _this.updateDB = function (idToUpdate, updateToApply) {\n      var objIdToUpdate = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n\n      axios.post(\"http://localhost:3002/api/updateData\", {\n        id: 999,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has \n    // changed and implement those changes into our UI\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 5000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    } // our first get method that uses our backend api to \n    // fetch data from our data base\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var data = this.state.data;\n      return React.createElement(\"div\", {\n        style: {\n          padding: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"script\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"CHAZ Dashboard\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(DashboardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: \"200px\"\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idToUpdate: e.target.value\n          });\n        },\n        placeholder: \"id of item to update here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: \"200px\"\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            updateToApply: e.target.value\n          });\n        },\n        placeholder: \"put new value of the item here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.updateDB(_this2.state.idToUpdate, _this2.state.updateToApply);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"UPDATE\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Projects\\NodeJS\\fullstack_app\\client\\src\\App.js"],"names":["React","Component","axios","DashboardBody","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","putDataToDB","currentIds","map","idToBeAdded","deleteFromDB","idTodelete","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","post","update","interval","setInterval","setState","clearInterval","padding","width","e","target","value"],"mappings":"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","sourcesContent":["// /client/App.js\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport './mainpage.css'\nimport DashboardBody from './DashboardBody'\n\nclass App extends Component {\n  // initialize our state \n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has \n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 5000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // our first get method that uses our backend api to \n  // fetch data from our data base\n  getDataFromDb = () => {\n    // fetch(\"http://localhost:3002/api/getData\")\n    //   .then(data => data.json())\n    //   .then(res => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = message => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    // while (currentIds.includes(idToBeAdded)) {\n    //   ++idToBeAdded;\n    // }\n\n    // axios.post(\"http://localhost:3002/api/putData\", {\n    //   id: idToBeAdded,\n    //   message: message\n    // });\n  };\n\n\n  // our delete method that uses our backend api \n  // to remove existing database information\n  deleteFromDB = idTodelete => {\n    let objIdToDelete = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete(\"http://localhost:3002/api/deleteData\", {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  };\n\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post(\"http://localhost:3002/api/updateData\", {\n      id: 999,\n      update: { message: updateToApply }\n    });\n  };\n\n\n  render() {\n    const { data } = this.state;\n    return (\n      <div style={{padding:\"20px\"}}>\n        <div className=\"title\">\n            <div className=\"shadow\">\n                <h1 className=\"script\">CHAZ Dashboard</h1>\n            </div>\n        </div>\n        <div>\n            <DashboardBody/>\n            <input\n          type=\"text\"\n          style={{ width: \"200px\" }}\n          onChange={e => this.setState({ idToUpdate: e.target.value })}\n          placeholder=\"id of item to update here\"\n        />\n        <input\n          type=\"text\"\n          style={{ width: \"200px\" }}\n          onChange={e => this.setState({ updateToApply: e.target.value })}\n          placeholder=\"put new value of the item here\"\n        />\n        <button\n          onClick={() =>\n            this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n          }\n        >\n          UPDATE\n        </button>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}